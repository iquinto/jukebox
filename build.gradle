import grails.util.Environment

import java.text.SimpleDateFormat



buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.4"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.8"
    }
}

version "0.1"
group "jukebox"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"jacoco"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}


dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.5.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.8"
    runtime "org.postgresql:postgresql:9.4.1208.jre7"
    
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testCompile "org.seleniumhq.selenium:selenium-api:3.6.0"
    testCompile "org.seleniumhq.selenium:selenium-support:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"

    // testcontainers
    testCompile 'com.zaxxer:HikariCP:3.4.2'
    testCompile "org.testcontainers:spock:1.13.0"
    testCompile "org.testcontainers:testcontainers:1.13.0"
    testCompile "org.testcontainers:postgresql:1.13.0"
    testCompile "org.testcontainers:oracle-xe:1.13.0"
    testCompile "org.testcontainers:selenium:1.13.0"
    testRuntime 'org.postgresql:postgresql:42.2.12'

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

webdriverBinaries {
    chromedriver '2.35'
    geckodriver '0.19.1'
}



tasks.withType(Test) {
    systemProperties = System.properties
    systemProperty "grails.env", Environment.TEST
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")

    jacoco {
        enabled = true
        project.hasProperty("jacoco_exec") ? setDestinationFile(file("$buildDir/jacoco/exe/${jacoco_exec}.exec")): setDestinationFile(file("$buildDir/jacoco/exe/${new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())}-${Math.random()*1000}.exec"))
    }
    
}

jacocoTestReport {
    sourceSets sourceSets.main
    executionData = fileTree(dir: "$buildDir/jacoco/", includes: ["exe/*.exec"])
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacoco/reports")
        xml.destination file("${buildDir}/jacoco/xml/${new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())}-${Math.random() * 1000}.xml")
    }
}


assets {
    minifyJs = true
    minifyCss = true
}
